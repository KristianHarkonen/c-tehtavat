#include<SDL.h>
#include<cmath>
const int SCREEN_WIDTH = 1300;
const int SCREEN_HEIGHT = 700;
const int arrSize = 50;
const int rectSize = SCREEN_WIDTH / (arrSize * 3);
const int speed = 5000 / pow(arrSize, 1.6);
SDL_Window* window = NULL;
SDL_Renderer* renderer = NULL;
// Paaohjelma, joka visualisoi kolme erilaista jarjestamisalgoritmia: Bubblesort, Selectionsort ja Insertionsort.
// Aluksi maaritellaan taulukot ja tallennetaan niihin dataa, jota tullaan jarjestamaan.
// SDL2-komentojen avulla ensin visualisoidaan taulukoiden sisaltama data.
// Iteroidaan samanaikaisesti yksi kierros kerrallaan kutakin algoritmia ja visualisoidaan tulokset.
// Kunkin kierroksen kasiteltavat alkiot merkitaan vareilla.
// Algoritmeja jatketaan, kunnes kasiteltava data on suuruusjarjestyksessa.
int main(int argc, char* arg[]) {
	int arr[arrSize];
	int arr2[arrSize];
	int arr3[arrSize];
	for (int i = 0; i < arrSize; i++) {
		arr[i] = SCREEN_HEIGHT / 2 + (SCREEN_HEIGHT / 2) * i / arrSize * pow(-1, i);
	}
	for (int i = 0; i < arrSize; i++) {
		arr2[i] = SCREEN_HEIGHT / 2 + (SCREEN_HEIGHT / 2) * i / arrSize * pow(-1, i);
	}
	for (int i = 0; i < arrSize; i++) {
		arr3[i] = SCREEN_HEIGHT / 2 + (SCREEN_HEIGHT / 2) * i / arrSize * pow(-1, i);
	}
	SDL_Init(SDL_INIT_EVERYTHING);
	SDL_Window* window = SDL_CreateWindow("title", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
	SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
	SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0);
	SDL_RenderClear(renderer);
	int j = 0;
	for (int i = 0; i < SCREEN_WIDTH / 3; i += rectSize)
	{
		SDL_PumpEvents();
		SDL_Rect rect = { i, 0, rectSize, arr[j] };
		SDL_SetRenderDrawColor(renderer, 170, 183, 184, 0);
		SDL_RenderDrawRect(renderer, &rect);
		j++;
	}
	j = 0;
	for (int i = SCREEN_WIDTH / 3; i < 2 * SCREEN_WIDTH / 3; i += rectSize)
	{
		SDL_PumpEvents();
		SDL_Rect rect2 = { i, 0, rectSize, arr2[j] };
		SDL_SetRenderDrawColor(renderer, 170, 183, 184, 0);
		SDL_RenderDrawRect(renderer, &rect2);
		j++;
	}
	j = 0;
	for (int i = 2 * SCREEN_WIDTH / 3; i < SCREEN_WIDTH; i += rectSize)
	{
		SDL_PumpEvents();
		SDL_Rect rect3 = { i, 0, rectSize, arr3[j] };
		SDL_SetRenderDrawColor(renderer, 170, 183, 184, 0);
		SDL_RenderDrawRect(renderer, &rect3);
		j++;
	}
	SDL_RenderPresent(renderer);
	SDL_Delay(5000);
	int minIndex;
	for (int i = 0; i < arrSize; i++) {
		SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0);
		SDL_RenderClear(renderer);
		j = 0;
		for (int i = SCREEN_WIDTH / 3; i < 2 * SCREEN_WIDTH / 3; i += rectSize)
		{
			SDL_PumpEvents();
			SDL_Rect rect2 = { i, 0, rectSize, arr2[j] };
			SDL_SetRenderDrawColor(renderer, 170, 183, 184, 0);
			SDL_RenderDrawRect(renderer, &rect2);
			j++;
		}
		j = 0;
		for (int i = 2 * SCREEN_WIDTH / 3; i < SCREEN_WIDTH; i += rectSize)
		{
			SDL_PumpEvents();
			SDL_Rect rect3 = { i, 0, rectSize, arr3[j] };
			SDL_SetRenderDrawColor(renderer, 170, 183, 184, 0);
			SDL_RenderDrawRect(renderer, &rect3);
			j++;
		}

		for (int j = 0; j < arrSize - i; j++) {
			if (arr[j + 1] < arr[j]) {
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
				auto visualize = [renderer, arr](int x = -1, int y = -1, int z = -1) {
					int j = 0;
					for (int i = 0; i < SCREEN_WIDTH / 3; i += rectSize) {
						SDL_PumpEvents();
						SDL_Rect rect = { i, 0, rectSize, arr[j] };
						if (j == x || j == z) {
							SDL_SetRenderDrawColor(renderer, 100, 180, 100, 0);
							SDL_RenderFillRect(renderer, &rect);
						}
						else if (j == y) {
							SDL_SetRenderDrawColor(renderer, 165, 105, 189, 0);
							SDL_RenderFillRect(renderer, &rect);
						}
						else {
							SDL_SetRenderDrawColor(renderer, 170, 183, 184, 0);
							SDL_RenderDrawRect(renderer, &rect);
						}
						j++;
					}
					SDL_RenderPresent(renderer);
					};
				visualize(j + 1, j, arrSize - i);
			}
			SDL_Delay(speed);
		}
		minIndex = i;
		for (int j = i + 1; j < arrSize; j++)
		{
			if (arr2[j] < arr2[minIndex])
			{
				minIndex = j;
				auto visualize2 = [renderer, arr2](int x = -1, int y = -1, int z = -1) {
					int j = 0;
					for (int i = SCREEN_WIDTH / 3; i < 2 * SCREEN_WIDTH / 3; i += rectSize) {
						SDL_PumpEvents();
						SDL_Rect rect2 = { i, 0, rectSize, arr2[j] };
						if (j == x || j == z) {
							SDL_SetRenderDrawColor(renderer, 100, 180, 100, 0);
							SDL_RenderFillRect(renderer, &rect2);
						}
						else if (j == y) {
							SDL_SetRenderDrawColor(renderer, 165, 105, 189, 0);
							SDL_RenderFillRect(renderer, &rect2);
						}
						else {
							SDL_SetRenderDrawColor(renderer, 170, 183, 184, 0);
							SDL_RenderDrawRect(renderer, &rect2);
						}
						j++;
					}
					SDL_RenderPresent(renderer);
					};
				visualize2(i, minIndex);
			}
			SDL_Delay(speed);
		}
		int temp = arr2[i];
		arr2[i] = arr2[minIndex];
		arr2[minIndex] = temp;

		int j = i - 1;
		int temp2 = arr3[i];
		while (j >= 0 && arr3[j] > temp2)
		{
			arr3[j + 1] = arr3[j];
			j--;
			auto visualize3 = [renderer, arr3](int x = -1, int y = -1, int z = -1) {
				int j = 0;
				for (int i = 2 * SCREEN_WIDTH / 3; i < SCREEN_WIDTH; i += rectSize) {
					SDL_PumpEvents();
					if (j == x || j == z) {
						SDL_Rect rect3 = { i, 0, rectSize, arr3[j] - 1 };
						SDL_SetRenderDrawColor(renderer, 100, 180, 100, 0);
						SDL_RenderFillRect(renderer, &rect3);
					}
					else if (j == y) {
						SDL_Rect rect3 = { i, 0, rectSize, arr3[j] - 1 };
						SDL_SetRenderDrawColor(renderer, 165, 105, 189, 0);
						SDL_RenderFillRect(renderer, &rect3);
					}
					else {
						SDL_Rect rect3 = { i, 0, rectSize, arr3[j] };
						SDL_SetRenderDrawColor(renderer, 170, 183, 184, 0);
						SDL_RenderDrawRect(renderer, &rect3);
					}
					j++;
					SDL_RenderPresent(renderer);
				}
				};
			visualize3(i, j + 1);
			SDL_Delay(speed);
		}
		arr3[j + 1] = temp2;
	}
	SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0);
	SDL_RenderClear(renderer);
	j = 0;
	for (int i = 0; i < SCREEN_WIDTH / 3; i += rectSize)
	{
		SDL_PumpEvents();
		SDL_Rect rect = { i, 0, rectSize, arr[j] };
		SDL_SetRenderDrawColor(renderer, 170, 183, 184, 0);
		SDL_RenderDrawRect(renderer, &rect);
		j++;
	}
	j = 0;
	for (int i = SCREEN_WIDTH / 3; i < 2 * SCREEN_WIDTH / 3; i += rectSize)
	{
		SDL_PumpEvents();
		SDL_Rect rect2 = { i, 0, rectSize, arr2[j] };
		SDL_SetRenderDrawColor(renderer, 170, 183, 184, 0);
		SDL_RenderDrawRect(renderer, &rect2);
		j++;
	}
	j = 0;
	for (int i = 2 * SCREEN_WIDTH / 3; i < SCREEN_WIDTH; i += rectSize)
	{
		SDL_PumpEvents();
		SDL_Rect rect3 = { i, 0, rectSize, arr3[j] };
		SDL_SetRenderDrawColor(renderer, 170, 183, 184, 0);
		SDL_RenderDrawRect(renderer, &rect3);
		j++;
	}
	SDL_RenderPresent(renderer);
	SDL_Delay(100000);
	return 0;
}
